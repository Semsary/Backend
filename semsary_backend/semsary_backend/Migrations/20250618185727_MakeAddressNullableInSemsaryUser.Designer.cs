// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using semsary_backend.EntityConfigurations;

#nullable disable

namespace semsary_backend.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20250618185727_MakeAddressNullableInSemsaryUser")]
    partial class MakeAddressNullableInSemsaryUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentalRentalUnit", b =>
                {
                    b.Property<string>("RentalUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RentalsRentalId")
                        .HasColumnType("int");

                    b.HasKey("RentalUnitId", "RentalsRentalId");

                    b.HasIndex("RentalsRentalId");

                    b.ToTable("RentalRentalUnit");
                });

            modelBuilder.Entity("semsary_backend.Models.Advertisement", b =>
                {
                    b.Property<string>("AdvertisementId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("houseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rentalType")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("HouseId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("semsary_backend.Models.BlockedId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlockedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BlockedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LandlordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlockedBy");

                    b.HasIndex("LandlordId")
                        .IsUnique();

                    b.ToTable("BlockedIds");
                });

            modelBuilder.Entity("semsary_backend.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantUsername1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("HouseId");

                    b.HasIndex("TenantUsername");

                    b.HasIndex("TenantUsername1");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("semsary_backend.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("ComplaintDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("ComplaintId");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.HasIndex("SubmittedBy");

                    b.HasIndex("TenantUsername");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("semsary_backend.Models.Coupon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExPosedPy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("semsary_backend.Models.Email", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("NumberofMismatch")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("otpType")
                        .HasColumnType("int");

                    b.Property<string>("ownerUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("email");

                    b.HasIndex("ownerUsername");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("semsary_backend.Models.House", b =>
                {
                    b.Property<string>("HouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AvrageRate")
                        .HasColumnType("float");

                    b.Property<string>("LandlordUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumOfRaters")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("governorate")
                        .HasColumnType("int");

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HouseId");

                    b.HasIndex("LandlordUsername");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("semsary_backend.Models.HouseInspection", b =>
                {
                    b.Property<string>("HouseInspectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("HouseFeature")
                        .HasColumnType("int");

                    b.Property<string>("HouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("HouseImages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectionReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InspectionRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfAirConditionnar")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBalacons")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBedRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChairs")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPathRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTables")
                        .HasColumnType("int");

                    b.Property<int>("inspectionStatus")
                        .HasColumnType("int");

                    b.Property<string>("latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("HouseInspectionId");

                    b.HasIndex("HouseId");

                    b.HasIndex("InspectorId");

                    b.ToTable("HouseInspections");
                });

            modelBuilder.Entity("semsary_backend.Models.IdentityDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("ImageURLS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewerUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantUsername")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUsername");

                    b.HasIndex("ReviewerUsername");

                    b.HasIndex("TenantUsername");

                    b.ToTable("identityDocuments");
                });

            modelBuilder.Entity("semsary_backend.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LandlordUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LandlordUsername");

                    b.HasIndex("TenantUsername");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("semsary_backend.Models.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateId"));

                    b.Property<string>("HouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StarsNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenantUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantUsername1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RateId");

                    b.HasIndex("HouseId");

                    b.HasIndex("TenantUsername");

                    b.HasIndex("TenantUsername1");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("semsary_backend.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumOfComments")
                        .HasColumnType("int");

                    b.Property<int>("RentalType")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("RentalUnitIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantUsername1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WarrantyMoney")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("RentalId");

                    b.HasIndex("HouseId");

                    b.HasIndex("TenantUsername");

                    b.HasIndex("TenantUsername1");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("semsary_backend.Models.RentalUnit", b =>
                {
                    b.Property<string>("RentalUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdvertisementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DailyCost")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyCost")
                        .HasColumnType("int");

                    b.HasKey("RentalUnitId");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("RentalUnits");
                });

            modelBuilder.Entity("semsary_backend.Models.SermsaryUser", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("SermsaryUsers");

                    b.HasDiscriminator().HasValue("SermsaryUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("semsary_backend.Models.Admin", b =>
                {
                    b.HasBaseType("semsary_backend.Models.SermsaryUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("semsary_backend.Models.CustomerService", b =>
                {
                    b.HasBaseType("semsary_backend.Models.SermsaryUser");

                    b.PrimitiveCollection<string>("DeviceTokens")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SermsaryUsers", t =>
                        {
                            t.Property("DeviceTokens")
                                .HasColumnName("CustomerService_DeviceTokens");
                        });

                    b.HasDiscriminator().HasValue("CustomerService");
                });

            modelBuilder.Entity("semsary_backend.Models.UnverifiedUser", b =>
                {
                    b.HasBaseType("semsary_backend.Models.SermsaryUser");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("UnverifiedUser");
                });

            modelBuilder.Entity("semsary_backend.Models.Landlord", b =>
                {
                    b.HasBaseType("semsary_backend.Models.UnverifiedUser");

                    b.PrimitiveCollection<string>("DeviceTokens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Landlord");
                });

            modelBuilder.Entity("semsary_backend.Models.Tenant", b =>
                {
                    b.HasBaseType("semsary_backend.Models.UnverifiedUser");

                    b.Property<bool>("CompletedProfile")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("DeviceTokens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FavouriteRentalType")
                        .HasColumnType("int");

                    b.Property<bool>("IsSmoker")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedNearUniversity")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedNearVitalPlaces")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedPublicService")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedPublicTransportation")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<DateTime>("PremiumBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PremiumEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.ToTable("SermsaryUsers", t =>
                        {
                            t.Property("DeviceTokens")
                                .HasColumnName("Tenant_DeviceTokens");
                        });

                    b.HasDiscriminator().HasValue("Tenant");
                });

            modelBuilder.Entity("RentalRentalUnit", b =>
                {
                    b.HasOne("semsary_backend.Models.RentalUnit", null)
                        .WithMany()
                        .HasForeignKey("RentalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Rental", null)
                        .WithMany()
                        .HasForeignKey("RentalsRentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("semsary_backend.Models.Advertisement", b =>
                {
                    b.HasOne("semsary_backend.Models.House", "House")
                        .WithMany("Advertisements")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("semsary_backend.Models.BlockedId", b =>
                {
                    b.HasOne("semsary_backend.Models.CustomerService", "customerService")
                        .WithMany("BlockedIds")
                        .HasForeignKey("BlockedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Landlord", "Landlord")
                        .WithOne("BlockedId")
                        .HasForeignKey("semsary_backend.Models.BlockedId", "LandlordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("customerService");
                });

            modelBuilder.Entity("semsary_backend.Models.Comment", b =>
                {
                    b.HasOne("semsary_backend.Models.House", "House")
                        .WithMany("Comments")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", null)
                        .WithMany("Comments")
                        .HasForeignKey("TenantUsername1");

                    b.Navigation("House");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("semsary_backend.Models.Complaint", b =>
                {
                    b.HasOne("semsary_backend.Models.Rental", "Rental")
                        .WithOne("Complaint")
                        .HasForeignKey("semsary_backend.Models.Complaint", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("SubmittedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", null)
                        .WithMany("Complaints")
                        .HasForeignKey("TenantUsername");

                    b.HasOne("semsary_backend.Models.CustomerService", "CustomerService")
                        .WithMany("Complaints")
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerService");

                    b.Navigation("Rental");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("semsary_backend.Models.Email", b =>
                {
                    b.HasOne("semsary_backend.Models.SermsaryUser", "owner")
                        .WithMany("Emails")
                        .HasForeignKey("ownerUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");
                });

            modelBuilder.Entity("semsary_backend.Models.House", b =>
                {
                    b.HasOne("semsary_backend.Models.Landlord", "owner")
                        .WithMany("Houses")
                        .HasForeignKey("LandlordUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");
                });

            modelBuilder.Entity("semsary_backend.Models.HouseInspection", b =>
                {
                    b.HasOne("semsary_backend.Models.House", "House")
                        .WithMany("HouseInspections")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.CustomerService", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.Navigation("House");

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("semsary_backend.Models.IdentityDocument", b =>
                {
                    b.HasOne("semsary_backend.Models.UnverifiedUser", "Owner")
                        .WithMany("Identity")
                        .HasForeignKey("OwnerUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.CustomerService", "reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerUsername");

                    b.HasOne("semsary_backend.Models.Tenant", null)
                        .WithMany("documents")
                        .HasForeignKey("TenantUsername");

                    b.Navigation("Owner");

                    b.Navigation("reviewer");
                });

            modelBuilder.Entity("semsary_backend.Models.Notification", b =>
                {
                    b.HasOne("semsary_backend.Models.Landlord", "Landlord")
                        .WithMany("Notifications")
                        .HasForeignKey("LandlordUsername");

                    b.HasOne("semsary_backend.Models.Tenant", "Tenant")
                        .WithMany("Notifications")
                        .HasForeignKey("TenantUsername");

                    b.Navigation("Landlord");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("semsary_backend.Models.Rate", b =>
                {
                    b.HasOne("semsary_backend.Models.House", "House")
                        .WithMany("Rates")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", null)
                        .WithMany("Rates")
                        .HasForeignKey("TenantUsername1");

                    b.Navigation("House");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("semsary_backend.Models.Rental", b =>
                {
                    b.HasOne("semsary_backend.Models.House", "House")
                        .WithMany("Rentals")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("semsary_backend.Models.Tenant", null)
                        .WithMany("Rentals")
                        .HasForeignKey("TenantUsername1");

                    b.Navigation("House");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("semsary_backend.Models.RentalUnit", b =>
                {
                    b.HasOne("semsary_backend.Models.Advertisement", "Advertisement")
                        .WithMany("RentalUnits")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("semsary_backend.Models.SermsaryUser", b =>
                {
                    b.OwnsOne("semsary_backend.Enums.Address", "Address", b1 =>
                        {
                            b1.Property<string>("SermsaryUserUsername")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_city")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("_gover")
                                .HasColumnType("int");

                            b1.Property<int>("id")
                                .HasColumnType("int");

                            b1.Property<string>("street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SermsaryUserUsername");

                            b1.ToTable("SermsaryUsers");

                            b1.WithOwner()
                                .HasForeignKey("SermsaryUserUsername");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("semsary_backend.Models.Advertisement", b =>
                {
                    b.Navigation("RentalUnits");
                });

            modelBuilder.Entity("semsary_backend.Models.House", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Comments");

                    b.Navigation("HouseInspections");

                    b.Navigation("Rates");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("semsary_backend.Models.Rental", b =>
                {
                    b.Navigation("Complaint")
                        .IsRequired();
                });

            modelBuilder.Entity("semsary_backend.Models.SermsaryUser", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("semsary_backend.Models.CustomerService", b =>
                {
                    b.Navigation("BlockedIds");

                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("semsary_backend.Models.UnverifiedUser", b =>
                {
                    b.Navigation("Identity");
                });

            modelBuilder.Entity("semsary_backend.Models.Landlord", b =>
                {
                    b.Navigation("BlockedId")
                        .IsRequired();

                    b.Navigation("Houses");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("semsary_backend.Models.Tenant", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Complaints");

                    b.Navigation("Notifications");

                    b.Navigation("Rates");

                    b.Navigation("Rentals");

                    b.Navigation("documents");
                });
#pragma warning restore 612, 618
        }
    }
}
